// bfs.js

/*
Алгоритм поиска в ширину (BFS)

BFS используется для исследования узлов и ребер графа по уровням. Начинается с корневого
узла и исследует все соседние узлы. Затем для каждого из ближайших узлов исследует их
неизведанные соседние узлы, и так далее, пока не найдет целевой узел или пока не будут
исследованы все узлы.

Плюсы:

Гарантирует нахождение кратчайшего пути в невзвешенных графах (при условии, что все рёбра имеют одинаковый вес).
Прост в реализации.
Эффективен для поиска в ширину в деревьях и графах.
Минусы:

Требует больше памяти, чем DFS, из-за использования очереди.
Не подходит для поиска кратчайшего пути в графах с весами рёбер, отличными от единицы.
Может быть неэффективным для больших и плотных графов из-за необходимости хранения всех посещенных вершин.
*/

function bfs(graph, start) {
    let visited = new Set();
    let queue = [start];

    while (queue.length > 0) {
        let vertex = queue.shift();
        if (!visited.has(vertex)) {
            console.log(vertex);
            visited.add(vertex);
            graph[vertex].forEach(neighbor => queue.push(neighbor));
        }
    }
}

let graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
};

bfs(graph, 'A');

module.exports = bfs;