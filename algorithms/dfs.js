// dfs.js

/*
Алгоритм поиска в глубину (DFS)

DFS используется для исследования узлов и ребер графа, погружаясь как можно глубже по
одному пути перед возвратом назад и исследованием следующего пути. Обычно реализуется с
помощью рекурсии или с использованием явного стека.

Плюсы:

Прост в реализации.
Подходит для задач, связанных с поиском в глубину, таких как топологическая сортировка, нахождение компонент связности и т.д.
Может быть реализован как рекурсивно, так и итеративно.
Минусы:

Не гарантирует нахождения кратчайшего пути в невзвешенных графах (для этого лучше использовать BFS).
Может занимать много памяти при обработке больших графов из-за использования стека.
Может зациклиться, если граф содержит циклы (для предотвращения нужна проверка посещенных вершин).
*/


function dfs(graph, start) {
    let visited = new Set();

    function dfsRecursive(vertex) {
        if (!visited.has(vertex)) {
            console.log(vertex);
            visited.add(vertex);
            graph[vertex].forEach(neighbor => dfsRecursive(neighbor));
        }
    }

    dfsRecursive(start);
}

let graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
};

dfs(graph, 'A');

module.exports = dfs;
